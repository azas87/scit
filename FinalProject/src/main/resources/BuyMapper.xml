<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kay87.team.dao.BuyMapper">
	
<!-- 검색한 생선리스트 가져오기 -->
	<select id="getFishName" parameterType="string" resultType="FishList">
		
		select * from fishList
		where fishName LIKE '%' || #{search} || '%'
	
	</select>
	
<!-- 구매글 올리기	 -->
	<insert id="insertBuyList" parameterType="BuyList">
	
		insert into buyList
		(
			buyNum
			, fishName
			, buyerId
			<if test="uploadDate !=null">
			, uploadDate
			</if>
			, deadline
			, weight
			, price
			<if test="buyListComment !=null">
			, buyListComment
			</if>
			, location
		)
		values
		(
			buyNum.nextval
			, #{fishName}
			, #{buyerId}
			<if test="uploadDate !=null">
			, TO_DATE(#{uploadDate}, 'yyyy/mm/dd hh24:mi:ss')
			</if>
			, TO_DATE(#{deadline}, 'yyyy/mm/dd hh24:mi:ss')
			, #{weight}
			, #{price}
			<if test="buyListComment !=null">
			, #{buyListComment}
			</if>
			, #{location}
		)

	</insert>
	
	<!-- 사용자의 판매이력 가져오기(중복된 판매자는 제외) 
	판매자 우선순위를 위해-->
	<select id="getHistorySellerId" parameterType="string" resultType="BuyList">
		
		SELECT * FROM buyList 
 		WHERE ROWID IN(SELECT MAX(ROWID) FROM buyList 
 		where buyerid = #{id}
 		GROUP BY successsellerId) 
 		and successsellerId is not null
 		
	</select>
	
	<!-- 구매이력 가져오기 -->
	<select id="getSuccessBuyList" parameterType="map" resultType="BuyList">
	
			SELECT
				buyNum,
				fishName,
				buyerId,
				TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
				TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
				TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
				weight,
				saleStatus,
				price,
				successSellerId,
				buyListComment,
				location 
			FROM 
				buyList
				
			WHERE buyerId = #{id}
			
			AND 
                saleStatus = 'saleComplete'
   			<if test="period !=null and period=='1week'">
            AND 
            	deadline >= sysdate-7
            </if>
            <if test="period !=null and period=='3week'">
            AND 
            	deadline >= sysdate-21
            </if>
            <if test="period !=null and period=='1month'">
            AND 
            	deadline >= sysdate-30
            </if>
             <if test="period !=null and period=='1year'">
            AND 
            	deadline >= sysdate-365
            </if>
            <if test="startDay !=null">
            <![CDATA[
            AND 
            	deadline >= #{startDay}
        	AND 
            	deadline <= #{endDay}
             ]]>
            </if>
            
	
	</select>
	
	<!-- 환불이력가져오기 -->
	<select id="getRefundsBuyList" parameterType="string" resultType="BuyList">
	
			SELECT
				buyNum,
				fishName,
				buyerId,
				TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
				TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
				TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
				weight,
				saleStatus,
				price,
				successSellerId,
				buyListComment,
				location 
			FROM 
				buyList
				
			WHERE buyerId = #{search}
			
			and 
                saleStatus ='refund'
	</select>

	
<!--전체구매리스트-->	
	<select id="allBuyList" resultType="BuyList" >

		SELECT 
			buyNum,
			fishName,
			buyerId,
			TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
			TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
			TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
			weight,
			saleStatus,
			price,
			successSellerId,
			buyListComment,
			location 

		from 
			BuyList
		where			
			saleStatus = 'onSale'
		order by buyNum asc
	</select>
	
	
	
<!--구매자 진행중인 리스트-->		
	<select id="myList_ing_buyer" resultType="BuyList" parameterType="string">
		select 
			b.buyNum,
			fishName,
			buyerId,
			TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
			TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
			TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
			weight,
			saleStatus,
			price,
			s.sellerid as successSellerId,
			buyListComment,
			location 
		from BuyList b, SaleList s
		where b.buynum=s.buynum 
		and buyerId = #{userId}
		and saleStatus = 'onSale'	
		order by buyNum asc			
	</select>	
	

<!--판매자 참여리스트-->		
	<select id="myList_ing_seller" resultType="BuyList" parameterType="string">	
		select 
			b.buyNum,
			fishName,
			buyerId,
			TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
			TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
			TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
			weight,
			saleStatus,
			price,
			buyListComment,
			location 
		from BuyList b, (select * from SaleList where  sellerid=#{userId}) s
		where b.buynum = s.buyNum
		order by saleStatus asc
	</select>

<!--구매자 내글 목록-->		
 	<select id="myAllList_buyer" resultType="BuyList" parameterType="string">	
		SELECT 
			buyNum,
			fishName,
			buyerId,
			TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
			TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
			TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
			weight,
			saleStatus,
			price,
			successSellerId,
			buyListComment,
			location 

		from 
			BuyList
		where			
			buyerId=#{userId}
		order by buyNum asc
	</select>
	
<!--판매자 나의 모든리스트-->		
<!-- 	<select id="myAllList_seller" resultType="BuyList" parameterType="string">	
		SELECT 
			buyNum,
			fishName,
			buyerId,
			TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
			TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
			TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
			weight,
			saleStatus,
			price,
			successSellerId,
			buyListComment,
			location 

		from 
			BuyList
		where			
			buyerId=#{userId}
		order by buyNum asc
	</select> -->


	<select id="GetTotalListCount" resultType="int" parameterType="string">
		SELECT COUNT(*) FROM buyList <if test="_parameter != null"> WHERE buyerId = #{search}  </if>
	</select>
	
	<select id="GetTotalRefundListCount" resultType="int" parameterType="string">
		SELECT COUNT(*) FROM buyList <if test="_parameter != null"> WHERE buyerId = #{search}  </if>
		AND saleStatus = 'refund'
	</select>
	
	<!-- 생선별 구매 합계 -->
	<select id="sumPricebyFishName" parameterType="map" resultType="BuyList">
		SELECT SUM(price) as price ,fishName
			FROM 
				buyList
	 		where 
	 			buyerid = #{id}
	 		and 
                saleStatus = 'saleComplete'
            <if test="period !=null and period=='1week'">
            AND 
            	deadline >= sysdate-7
            </if>
            <if test="period !=null and period=='3week'">
            AND 
            	deadline >= sysdate-21
            </if>
            <if test="period !=null and period=='1month'">
            AND 
            	deadline >= sysdate-30
            </if>
           
             <if test="period !=null and period=='1year'">
            AND 
            	deadline >= sysdate-365
            </if>
             
            <if test="startDay !=null">
            <![CDATA[
            AND 
            	deadline >= #{startDay}
        	AND 
            	deadline <= #{endDay}
             ]]>
            </if>
            group by 
                fishName
    </select>
    
    <!-- 월별 구매합계 -->
    <select id="sumPricebyMonth" parameterType="string" resultType="BuyList">
		select
   			 to_char(deadline, 'MM') as fishName, sum(price) as price
		from
    		buylist
		where 
    		to_char(deadline, 'YYYYMMDD') between sysdate-365 and sysdate
		and
   			buyerid = #{id}
		and 
		    saleStatus = 'saleComplete'
		group by 
		    to_char(deadline, 'MM')
		order by
 		   fishName
    </select>
    
    <!-- 수취확인 -->
	<update id="saleComplete" parameterType="string">
 
  	 	UPDATE buylist
     	SET saleStatus = 'getComplete'
    	WHERE buyNum = #{buyNum}

	</update>
	

	<!-- 판매자 선택  -->
	<update id="selectSeller" parameterType="map">
		UPDATE buylist
     	SET saleStatus = 'saleComplete'
     		,successSellerId=#{SellerId}
    	WHERE buyNum = #{buyNum}
	</update>


	<update id="refund" parameterType="string">
 
  	 	UPDATE buylist
     	SET saleStatus = 'refund'
    	WHERE buyNum = #{buyNum}

	</update>
	

	<!--구매자 구매목록에서 글삭제  -->
	<delete id="deleteMyList_buyer" parameterType="string">
		delete 
			BuyList 
		where 
			buyNum=#{buyNum} 		
	</delete>
	
	<!--판매자 구매목록에서 글삭제(취소)-->
	<delete id="deleteMyList_seller" parameterType="string">
		delete 
			saleList
		where 
			buyNum=#{buyNum} 		
	</delete>


	<select id="getTodayAvgList" resultType="AvgList">
		select f.fishName,nvl(sum(b.PRICE),0) as total, nvl(sum(b.WEIGHT),0) as weight, nvl(trunc((SUM(price)/count(*))),0) as avgprice, TO_DATE(b.deadline, 'YY/MM/DD') as dates
		from fishList f left outer join buyList b on(f.fishName = b.fishName)
		group by f.fishName, TO_DATE(b.deadline, 'YY/MM/DD') having TO_DATE(b.DEADLINE, 'YY/MM/DD') = TO_date(sysdate, 'YY/MM/DD') order by f.fishName
		
	</select>
	
	<select id="getWeekAvgList" resultType="AvgList">
		<!-- select fishname,avgprice,dates from weekavglist order by dates, fishname -->
		select * from WEEKAVGLIST where fishname in('すずき','イセエビ','キダイ','キンメダイ','クマエビ') order by dates, fishname
	</select>
	
	<insert id="setWeekAvgList" parameterType="AvgList">
		insert into WEEKAVGLIST
		(
			AvgListNum
			,fishName
			, avgPrice
			, dates
		)
		values
		(
			avgListNum.nextval
			,#{fishName}
			,#{avgPrice}
			,sysdate
		)
	</insert>
	
	<select id="sellerWishList" resultType="BuyList" parameterType="string">
		SELECT 
			buyNum,
			fishName,
			buyerId,
			TO_CHAR(registDate, 'YYYY-MM-DD') as registDate,
			TO_CHAR(uploadDate, 'YYYY-MM-DD') as uploadDate,
			TO_CHAR(deadline, 'YYYY-MM-DD HH24:MI:SS') as deadline,
			weight,
			saleStatus,
			price,
			successSellerId,
			buyListComment,
			location 

		from 
			BuyList b, wishlist w
		where			
			b.buyerid=w.id 
			and w.wish=b.fishname
			and b.buyerid=#{userid}
			and b.salestatus='onSale'
		order by b.buyNum asc
	</select>
	
	<select id="selectOneBuylist" parameterType="int" resultType="BuyList">
		
		SELECT * FROM buylist WHERE buyNum = #{value}
		
	</select>
	<!-- <insert id="insertTodayAvgList" parameterType="TodayAvgList">
		insert into buyList
		(
			avgListNum
			,fishName
			, avgPrice
			, date
		)
		values
		(
			avgListNum.nextval
			,fishName
			, avgPrice
			, to_char(sysdate,YYYY/MM/DD);
<<<<<<< HEAD
		)	
	</insert>
=======
		)
	</insert> -->

	<select id="getMarketPrice" resultType="AvgList">
>>>>>>> refs/remotes/origin/mina
	
		SELECT fishName, to_number(to_char(dates, 'yyyymmdd')) as dates, avgPrice FROM WeekAvgList
		
	</select>

	
</mapper>